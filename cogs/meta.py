import discord
from discord.ext import commands
from random import choice

from util import aliases, config, flagset

class Meta(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    ops = config['BOT_OPS']
    prefix = config['PREFIX']

    # set listening status to a random song from config
    @commands.Cog.listener()
    async def on_ready(self):
        print(f'Logged in as {self.bot.user.name}: {self.bot.user.id}')
        print('The source code of hugmaker is available under the MIT License, and generated images are licensed under CC BY 4.0')
        print('See https://github.com/amazansky/hugmaker for more information.')
        print('------')

        await self.bot.change_presence(
            activity=discord.Activity(
                type=discord.ActivityType.listening,
                name=choice(config['MUSIC'])
            )
        )

    @commands.command()
    async def stat(self, ctx, *, song=None):
        if ctx.author.id in self.ops: # check if user is authorized
            newstat = song or choice(config['MUSIC']) # set to custom song if specified, or random if not.
            await self.bot.change_presence(
                activity=discord.Activity(
                    type=discord.ActivityType.listening,
                    name=newstat
                )
            )
            await ctx.message.add_reaction('\U00002705') # check mark emoji
        else:
            await ctx.message.add_reaction('\U000026A0') # warning emoji

    @commands.command()
    async def echo(self, ctx, text):
        if ctx.author.id in self.ops: # check if user is authorized
            await ctx.send(text)
            await ctx.message.add_reaction('\U00002705') # check mark emoji
        else:
            await ctx.message.add_reaction('\U000026A0') # warning emoji

    @commands.command()
    async def flags(self, ctx):
        abbr, full = choice(list(aliases.items()))
        em = discord.Embed(title='Pride flags', description=f'This is the full list of flags supported by the bot. Shortened names also work (e.g. \"{abbr}\" for \"{full}\").')
        em.add_field(name='Full list', value=', '.join(sorted(flagset)))
        em.add_field(name='More info', value=f'Run {self.prefix}flag `name` for more information on a specific pride flag.', inline=False)
        await ctx.send(embed=em)

    @commands.command()
    async def flag(self, ctx, flag):
        full = flag if flag not in aliases else aliases[flag]
        if full in flagset:
            aliases_for_full = [alias for alias in aliases if aliases[alias] == full]
            em = discord.Embed(title=f'Pride flag: {full.title()}')
            em.set_thumbnail(url=f'https://raw.githubusercontent.com/amazansky/hugmaker/main/flags/{full}.png')
            em.add_field(name='Short name(s)', value=', '.join(aliases_for_full) or '(None)')
            await ctx.send(embed=em)
        else:
            await ctx.send('Error: The flag you entered was not recognized.')

    @commands.command()
    async def about(self, ctx):
        em = discord.Embed(title=f'About hugmaker ({config["BOT_VERSION"]})', description='Hi, I\'m hugmaker! I am a \
            Discord bot which creates custom emotes.')
        em.add_field(name='Source code', value='Hugmaker is open source! You can find the code at <https://github.com/amazansky/hugmaker>. \
            The code is available under the MIT license. In addition, any images generated by hugmaker are available under \
            CC BY 4.0. Have any issues or run into problems using the bot? Report them at the issue tracker: \
            <https://github.com/amazansky/hugmaker/issues>', inline=False)
        opstring = ", ".join(["**" + str(await self.bot.fetch_user(uid)) + "**" for uid in self.ops])
        em.add_field(name='Operators', value=f'On this server, the operators of hugmaker are: {opstring}. You can ask them \
            if you have any questions about the bot.', inline=False)
        await ctx.send(embed=em)

def setup(bot):
    bot.add_cog(Meta(bot))
